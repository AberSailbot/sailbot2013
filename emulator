#!/usr/bin/env python
import socket
import sys
import re
import time
import traceback
import subprocess
import threading

from sailbot import Boat

boat = Boat()
logfile = 'log/' + '-'.join(['log-taken-on'] + time.asctime().split()[:-1])

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_address = ('localhost', 5555)
sock.bind(server_address)

DEBUG = False

events = [
          {
            #events with arguments
            'set rudder': boat.arduino.set_rudder,
            'set sail': boat.arduino.set_sail,
            'set waypointnorthing': boat.set_waypoint_northing,
            'set waypointeasting': boat.set_waypoint_easting,
            'set waypointnum': boat.set_waypoint_number,
            'set waypointdistance': boat.set_waypoint_distance,
            'set waypointheading': boat.set_waypoint_heading,
            'set targetheading': boat.set_target_heading,
            'set targetdistance': boat.set_target_distance
          },
          {
            #events without arguments
            'get compass': lambda: 'set compass {}'.format(boat.arduino.get_compass()),
            'get wind_dir': lambda: 'set wind_dir {}'.format(boat.get_wind_average()),
            'get northing': lambda: 'set northing {}'.format(boat.gps.position.lat),
            'get easting': lambda: 'set easting {}'.format(boat.gps.position.long),
            'get waypointnum': lambda: 'set waypointnum {}'.format(boat.get_waypoint_number()),
            'get temp': lambda: 'set temp {}'.format(boat.arduino.get_temp()),
          }
        ]

def get_event(s):
    for e in events[0]:
        match = re.match(e, s)
        if match:
            arg = s.split()[-1]
            return events[0][e](float(arg))
    for e in events[1]:
        match = re.match(e, s)
        if match:
            return events[1][e]()

logLock = threading.Lock()
def log(message, col=32):
    with logLock:
        print  '[\033[1;{col}m{}\033[0m]: {}'.format(time.time(), message, col=col)

def spawn_sailbotlogic():
    return subprocess.Popen(['../SailbotLogic/run'],
                            stdout=subprocess.PIPE, 
                            stderr=subprocess.STDOUT)

class InputThread(threading.Thread):
    def __init__(self,
                 connection,
                 inputQueue,
                 outputQueue,
                 sockLock,
                 queueLock):
        threading.Thread.__init__(self)
        self.connection = connection
        self.inputQueue = inputQueue
        self.outputQueue = outputQueue
        self.sockLock = sockLock
        self.queueLock = queueLock
        self._stop = False

    def run(self):
        data = ''
        while not self._stop:
            with self.sockLock:
                c = self.connection.recv(1)
                if c == '\n':
                    with self.queueLock:
                        self.inputQueue.append(data)
                        #log('received "%s"' % data, col=33)
                    data = ''
                else:
                    data += c
            time.sleep(0.001)

    def stop(self):
        self._stop = True

class OutputThread(threading.Thread):
    def __init__(self,
                 connection,
                 inputQueue,
                 outputQueue,
                 sockLock,
                 queueLock):
        threading.Thread.__init__(self)
        self.connection = connection
        self.inputQueue = inputQueue
        self.outputQueue = outputQueue
        self.sockLock = sockLock
        self.queueLock = queueLock
        self._stop = False

    def run(self):
        while not self._stop:
            if len(self.outputQueue) > 0:
                with self.queueLock:
                    msg = self.outputQueue[0]
                    if msg is not None:
                        connection.sendall(str(msg) + '\n')
                        del self.outputQueue[0]
                        #log('Sent : ' + str(msg), col=31)
                    else:
                        log('Didn\'t send a message for a set')

            time.sleep(0.001)

    def stop(self):
        self._stop = True

log('starting up on %s port %s' % server_address)
while True:
    inputQueue = []
    outputQueue = []
    sockLock = threading.Lock()
    queueLock = threading.Lock()
    print "starting thread!"
    sock.listen(1)
    connection, client_address = sock.accept()
    inputThread = InputThread(connection, inputQueue, outputQueue, sockLock, queueLock)
    inputThread.start()
    outputThread = OutputThread(connection, inputQueue, outputQueue, sockLock, queueLock)
    outputThread.start()

    try:
        while True:
            if boat.gps.shouldLog:
                boat.gps.shouldLog = False
                boat.log(logfile)

            #handle the IO queues between java and python
            with queueLock:
                if len(inputQueue) > 0:
                    data = inputQueue[-1]
                    try:
                        msg = get_event(data)
                        if msg is not None:
                            outputQueue.append(msg)
                        del inputQueue[-1]
                    except:
                        print traceback.format_exc()
                        if DEBUG:
                            sys.exit(1)
                        else:
                            #try to keep going if an error occurred
                            print 'no debug'
                            break
            with boat.xbee.threadLock:
                if len(boat.xbee.queue) > 0:
                    outputQueue.append(boat.xbee.queue[-1])
            time.sleep(0.01)
    finally:
        print 'closing connection...'
        inputThread.stop()
        outputThread.stop()
        connection.close()
        sys.exit()

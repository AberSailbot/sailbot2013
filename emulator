#!/usr/bin/env python
import socket
import sys
import re
import time
import traceback

from sailbot import Boat

boat = Boat('waypoints.pnts')
logfile = 'log/' + '-'.join(['log-taken-on'] + time.asctime().split()[:-1])

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_address = ('localhost', 5555)
sock.bind(server_address)
print >>sys.stderr, 'starting up on %s port %s' % server_address

DEBUG = True

events = [
          {
            #events with arguments
            'set rudder': boat.arduino.set_rudder,
            'set sail': boat.arduino.set_sail,
            'set waypointnorthing': boat.set_waypoint_northing,
            'set waypointeasting': boat.set_waypoint_easting,
            'set waypointnum': boat.set_waypoint_number,
            'set waypointdistance': boat.set_waypoint_distance,
            'set waypointheading': boat.set_waypoint_heading,
            'set targetheading': boat.set_target_heading,
            'set targetdistance': boat.set_target_distance
          },
          {
            #events without arguments
            'get compass': boat.arduino.get_compass,
            'get wind_dir': boat.get_wind_average,
            'get northing': lambda: boat.gps.position.lat,
            'get easting': lambda: boat.gps.position.long,
            'get waypointnum': boat.get_waypoint_number,
          }
        ]

def get_event(s):
    for e in events[0]:
        match = re.match(e, s)
        if match:
            arg = s.split()[-1]
            return events[0][e](float(arg))
    for e in events[1]:
        match = re.match(e, s)
        if match:
            return events[1][e]()

def log(message):
    print '[\033[1;32m{}\033[0m]: {}'.format(time.time(), message)

while True:
    sock.listen(1)
    connection, client_address = sock.accept()
    try:
        while True:
            if boat.gps.shouldLog:
                boat.log(logfile)
                boat.gps.shouldLog = False

            data = ''
            while True:
                c = connection.recv(1)
                if c == '\n' or c == '':
                    break
                else:
                    data += c

            print >>sys.stderr, 'received "%s"' % data
            if data:
                try:
                    msg = get_event(data)
                except:
                    print traceback.format_exc()
                    if DEBUG:
                        sys.exit(1)
                    else:
                        #try to keep going if an error occurred
                        break
                if msg is not None:
                    connection.sendall(str(msg) + '\n')
                    log('Sent : ' + str(msg))
                else:
                    log('Didn\'t send a message for a set')
            else:
                break
    finally:
        connection.close()
